#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('yphack:server');
var http = require('http');
var config = require('../config/config');
var fs = require('fs');
var twitter = require('twitter');
var nlp = require('../lib/nlp');
var yp = require('../lib/yp');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Socket.io
 */

var io = app.io;
io.listen(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Socket.io - Twitter stream integration
 */
// var hashString = "#HelloYP";
// var tweet = require('../lib/twitter');
// var client = new twitter(config.twitter);
// client.stream('statuses/filter', {track: hashString}, function(stream) {
//   stream.on('data', function(event) {
//     var twitterText = event.text.replace(hashString, "").trim();
//     twitterText = nlp.CreateSearchQuery(twitterText);
//     //console.log(event);
//     console.log("HERE 2");
//     var tweet_data = {
//       username: "@" + event.user.screen_name,
//       tweet_id: event.id_str,
//       text: twitterText,
//       coordinates: event.coordinates ? event.coordinates.coordinates : null,
//       place: event.place ? event.place.full_name : null
//     }
//     console.log(twitterText);
//
//     yp.find(tweet_data);
//     //tweet.sendTweet(event.id_str, "@" + event.user.screen_name, "Hello my dear sir");
//   });
//
//   stream.on('error', function(error) {
//     console.log(error);
//     console.log("Connection error with Twitter Stream");
//   });
// });


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}
